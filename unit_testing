import unittest
import pandas as pd
import os
from Threat_Profiling import load_json_files_from_directory, map_group_to_ttps, create_ttp_df, export_to_excel

class TestThreatProfile(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Sample data to mimic actual data from the MITRE repository
        cls.intrusion_sets = [
            {"id": "intrusion-set--001", "type": "intrusion-set", "name": "APT29"},
            {"id": "intrusion-set--002", "type": "intrusion-set", "name": "FIN6"}
        ]
        cls.attack_patterns = [
            {"id": "attack-pattern--001", "type": "attack-pattern", "name": "Spear Phishing", 
             "external_references": [{"external_id": "T1193"}],
             "kill_chain_phases": [{"phase_name": "Initial Access"}]},
            {"id": "attack-pattern--002", "type": "attack-pattern", "name": "PowerShell", 
             "external_references": [{"external_id": "T1059.001"}],
             "kill_chain_phases": [{"phase_name": "Execution"}]}
        ]
        cls.relationships = [
            {"type": "relationship", "relationship_type": "uses", "source_ref": "intrusion-set--001", "target_ref": "attack-pattern--001"},
            {"type": "relationship", "relationship_type": "uses", "source_ref": "intrusion-set--001", "target_ref": "attack-pattern--002"},
            {"type": "relationship", "relationship_type": "uses", "source_ref": "intrusion-set--002", "target_ref": "attack-pattern--002"}
        ]
        cls.available_groups = {'apt29': 'APT29', 'fin6': 'FIN6'}

    def test_map_group_to_ttps(self):
        group_to_ttps, all_ttps = map_group_to_ttps(self.intrusion_sets, self.attack_patterns, self.relationships)
        
        # Check mapping results
        self.assertEqual(len(group_to_ttps), 2)
        self.assertEqual(len(all_ttps), 2)
        self.assertEqual(all_ttps['T1193']['name'], 'Spear Phishing')

    def test_create_ttp_df(self):
        group_to_ttps, all_ttps = map_group_to_ttps(self.intrusion_sets, self.attack_patterns, self.relationships)
        ttp_df = create_ttp_df(all_ttps, group_to_ttps, ['APT29', 'FIN6'])
        
        # Check DataFrame structure
        self.assertEqual(ttp_df.shape, (2, 6))  # 2 TTPs, 6 columns
        self.assertIn('APT29', ttp_df.columns)
        self.assertIn('FIN6', ttp_df.columns)

    def test_ttp_consistency(self):
        group_to_ttps, all_ttps = map_group_to_ttps(self.intrusion_sets, self.attack_patterns, self.relationships)
        ttp_df = create_ttp_df(all_ttps, group_to_ttps, ['APT29', 'FIN6'])

        # Check consistency
        for group in ['APT29', 'FIN6']:
            for _, row in ttp_df.iterrows():
                if row[group] == 'yes':
                    self.assertIn(row['TTP ID'], group_to_ttps[group])
                else:
                    self.assertNotIn(row['TTP ID'], group_to_ttps[group])

    def test_case_insensitivity_and_validation(self):
        mixed_case_group = ['apt29', 'Fin6', 'unknown']
        valid_groups = [self.available_groups.get(group.lower()) for group in mixed_case_group if group.lower() in self.available_groups]

        self.assertEqual(valid_groups, ['APT29', 'FIN6'])  # 'unknown' should be excluded

    def test_export_to_excel(self):
        group_to_ttps, all_ttps = map_group_to_ttps(self.intrusion_sets, self.attack_patterns, self.relationships)
        ttp_df = create_ttp_df(all_ttps, group_to_ttps, ['APT29', 'FIN6'])
        export_to_excel(ttp_df, filename='test_threat_profile.xlsx')
        
        # Verify the file was created
        self.assertTrue(os.path.exists('test_threat_profile.xlsx'))
        loaded_df = pd.read_excel('test_threat_profile.xlsx', sheet_name='TTPs by Group')
        self.assertTrue(loaded_df.equals(ttp_df))

if __name__ == '__main__':
    unittest.main()
